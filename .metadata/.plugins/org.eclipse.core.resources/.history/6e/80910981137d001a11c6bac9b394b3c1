package RunnerClass;


import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import io.cucumber.testng.AbstractTestNGCucumberTests;
import io.cucumber.testng.PickleWrapper;
import io.cucumber.testng.TestNGCucumberRunner;
//@RunWith(Cucumber.class)
//@CucumberOptions(features = "E:/NoticeperiodSelenium/Cucumber_learning/src/main/java/Features",
//				 glue = "Definition",
//				 monochrome = true,
//				 dryRun=true
////				 strict=true//,
////				  plugin={ "pretty","html:target/cucumber-html","json:target/Cucumber.json"
////						  ,"pretty:target/cucumber-html.txt"
////						  ,"junit:target/cucumber-html.xml"
////						  ,"usage:target/cucumber-html1.json"
////						  ,"rerun:target/rerun.txt"
////						  }
//				 // OR {"@,@"}
//				 //,tags={"@smoke,@regressions"}
//				 // AND {"@","@"}
//				 //,tags={"@smoke","@regressions"}
//				 //NOT {"~@"}
//                 //,tags={"~@smoke,~@regressions"}
//				 
//					)



@CucumberOptions(features = "E:/NoticeperiodSelenium/Cucumber_learning/src/main/java/Features",
glue = "Definition",
monochrome = true,
dryRun=true)
//strict=true//,
// plugin={ "pretty","html:target/cucumber-html","json:target/Cucumber.json"
//		  ,"pretty:target/cucumber-html.txt"
//		  ,"junit:target/cucumber-html.xml"
//		  ,"usage:target/cucumber-html1.json"
//		  ,"rerun:target/rerun.txt"
//		  }


public class Runner2<CucumberFeatureWrapper> extends AbstractTestNGCucumberTests{
	
	private TestNGCucumberRunner testNGCucumberRunner;
	
	@BeforeClass(alwaysRun = true)
    public void setUpClass() {
        testNGCucumberRunner = new TestNGCucumberRunner(this.getClass());
    }
 
    @Test(groups = "cucumber", description = "Runs Cucumber Feature", dataProvider = "features")
    public void feature(PickleWrapper pickleEvent, CucumberFeatureWrapper cucumberFeature) throws Throwable {
    	
    	testNGCucumberRunner.runScenario(pickleEvent.getPickle());
       
    }
 
    @DataProvider
    public Object[][] features() {
        return testNGCucumberRunner.provideScenarios();
    }
 
    @AfterClass(alwaysRun = true)
    public void tearDownClass() {
        testNGCucumberRunner.finish();
    }

}
