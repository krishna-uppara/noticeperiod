package RunnerClass;

import org.junit.runner.RunWith;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import io.cucumber.testng.AbstractTestNGCucumberTests;
import io.cucumber.testng.FeatureWrapper;
import io.cucumber.testng.PickleWrapper;
import io.cucumber.testng.TestNGCucumberRunner;

@CucumberOptions(features = "E:/NoticeperiodSelenium/Cucumber_learning/src/main/java/Features", glue = "Definition", monochrome = true
// dryRun=true,
// strict=true
// plugin={ "pretty","html:target/cucumber-html","json:target/Cucumber.json"
// ,"pretty:target/cucumber-html.txt"
// ,"junit:target/cucumber-html.xml"
// ,"usage:target/cucumber-html1.json"
// ,"rerun:target/rerun.txt"
// }
// OR {"@,@"}
// ,tags={"@smoke,@regressions"}
// AND {"@","@"}
// ,tags={"@smoke","@regressions"}
// NOT {"~@"}
// ,tags={"~@smoke,~@regressions"}

)
@Test
public class Runner extends AbstractTestNGCucumberTests {

	TestNGCucumberRunner testNGCucumberRunner;

	@BeforeClass
	public void beforeClass() {

		testNGCucumberRunner = new TestNGCucumberRunner(this.getClass());
	}

	@Test(groups = "cucumber scenarios", description = "Runs Cucumber Scenarios", dataProvider = "scenarios")
	public void scenario(PickleWrapper pickleEvent, FeatureWrapper cucumberFeature) throws Throwable {
		testNGCucumberRunner.runScenario(pickleEvent.getPickle());
	}

	/**
	 * @return returns two dimensional array of {@link CucumberFeatureWrapper}
	 *         objects.
	 */
	@Override
	@DataProvider(parallel = true)
	public Object[][] scenarios() {
		return super.scenarios();
	}

	@AfterClass
	public void tearDown() {
		testNGCucumberRunner.finish();
	}

}
